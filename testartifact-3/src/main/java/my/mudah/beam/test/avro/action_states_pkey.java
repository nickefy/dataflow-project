/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package my.mudah.beam.test.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class action_states_pkey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7787871488206259570L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"action_states_pkey\",\"namespace\":\"my.mudah.beam.test.avro\",\"fields\":[{\"name\":\"ad_id\",\"type\":[\"null\",\"int\"]},{\"name\":\"action_id\",\"type\":[\"null\",\"int\"]},{\"name\":\"state_id\",\"type\":[\"null\",\"int\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer ad_id;
  @Deprecated public java.lang.Integer action_id;
  @Deprecated public java.lang.Integer state_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public action_states_pkey() {}

  /**
   * All-args constructor.
   * @param ad_id The new value for ad_id
   * @param action_id The new value for action_id
   * @param state_id The new value for state_id
   */
  public action_states_pkey(java.lang.Integer ad_id, java.lang.Integer action_id, java.lang.Integer state_id) {
    this.ad_id = ad_id;
    this.action_id = action_id;
    this.state_id = state_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ad_id;
    case 1: return action_id;
    case 2: return state_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ad_id = (java.lang.Integer)value$; break;
    case 1: action_id = (java.lang.Integer)value$; break;
    case 2: state_id = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ad_id' field.
   * @return The value of the 'ad_id' field.
   */
  public java.lang.Integer getAdId() {
    return ad_id;
  }

  /**
   * Sets the value of the 'ad_id' field.
   * @param value the value to set.
   */
  public void setAdId(java.lang.Integer value) {
    this.ad_id = value;
  }

  /**
   * Gets the value of the 'action_id' field.
   * @return The value of the 'action_id' field.
   */
  public java.lang.Integer getActionId() {
    return action_id;
  }

  /**
   * Sets the value of the 'action_id' field.
   * @param value the value to set.
   */
  public void setActionId(java.lang.Integer value) {
    this.action_id = value;
  }

  /**
   * Gets the value of the 'state_id' field.
   * @return The value of the 'state_id' field.
   */
  public java.lang.Integer getStateId() {
    return state_id;
  }

  /**
   * Sets the value of the 'state_id' field.
   * @param value the value to set.
   */
  public void setStateId(java.lang.Integer value) {
    this.state_id = value;
  }

  /**
   * Creates a new action_states_pkey RecordBuilder.
   * @return A new action_states_pkey RecordBuilder
   */
  public static my.mudah.beam.test.avro.action_states_pkey.Builder newBuilder() {
    return new my.mudah.beam.test.avro.action_states_pkey.Builder();
  }

  /**
   * Creates a new action_states_pkey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new action_states_pkey RecordBuilder
   */
  public static my.mudah.beam.test.avro.action_states_pkey.Builder newBuilder(my.mudah.beam.test.avro.action_states_pkey.Builder other) {
    return new my.mudah.beam.test.avro.action_states_pkey.Builder(other);
  }

  /**
   * Creates a new action_states_pkey RecordBuilder by copying an existing action_states_pkey instance.
   * @param other The existing instance to copy.
   * @return A new action_states_pkey RecordBuilder
   */
  public static my.mudah.beam.test.avro.action_states_pkey.Builder newBuilder(my.mudah.beam.test.avro.action_states_pkey other) {
    return new my.mudah.beam.test.avro.action_states_pkey.Builder(other);
  }

  /**
   * RecordBuilder for action_states_pkey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<action_states_pkey>
    implements org.apache.avro.data.RecordBuilder<action_states_pkey> {

    private java.lang.Integer ad_id;
    private java.lang.Integer action_id;
    private java.lang.Integer state_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(my.mudah.beam.test.avro.action_states_pkey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ad_id)) {
        this.ad_id = data().deepCopy(fields()[0].schema(), other.ad_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.action_id)) {
        this.action_id = data().deepCopy(fields()[1].schema(), other.action_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state_id)) {
        this.state_id = data().deepCopy(fields()[2].schema(), other.state_id);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing action_states_pkey instance
     * @param other The existing instance to copy.
     */
    private Builder(my.mudah.beam.test.avro.action_states_pkey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ad_id)) {
        this.ad_id = data().deepCopy(fields()[0].schema(), other.ad_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.action_id)) {
        this.action_id = data().deepCopy(fields()[1].schema(), other.action_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state_id)) {
        this.state_id = data().deepCopy(fields()[2].schema(), other.state_id);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'ad_id' field.
      * @return The value.
      */
    public java.lang.Integer getAdId() {
      return ad_id;
    }

    /**
      * Sets the value of the 'ad_id' field.
      * @param value The value of 'ad_id'.
      * @return This builder.
      */
    public my.mudah.beam.test.avro.action_states_pkey.Builder setAdId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.ad_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ad_id' field has been set.
      * @return True if the 'ad_id' field has been set, false otherwise.
      */
    public boolean hasAdId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ad_id' field.
      * @return This builder.
      */
    public my.mudah.beam.test.avro.action_states_pkey.Builder clearAdId() {
      ad_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'action_id' field.
      * @return The value.
      */
    public java.lang.Integer getActionId() {
      return action_id;
    }

    /**
      * Sets the value of the 'action_id' field.
      * @param value The value of 'action_id'.
      * @return This builder.
      */
    public my.mudah.beam.test.avro.action_states_pkey.Builder setActionId(java.lang.Integer value) {
      validate(fields()[1], value);
      this.action_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'action_id' field has been set.
      * @return True if the 'action_id' field has been set, false otherwise.
      */
    public boolean hasActionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'action_id' field.
      * @return This builder.
      */
    public my.mudah.beam.test.avro.action_states_pkey.Builder clearActionId() {
      action_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'state_id' field.
      * @return The value.
      */
    public java.lang.Integer getStateId() {
      return state_id;
    }

    /**
      * Sets the value of the 'state_id' field.
      * @param value The value of 'state_id'.
      * @return This builder.
      */
    public my.mudah.beam.test.avro.action_states_pkey.Builder setStateId(java.lang.Integer value) {
      validate(fields()[2], value);
      this.state_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'state_id' field has been set.
      * @return True if the 'state_id' field has been set, false otherwise.
      */
    public boolean hasStateId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'state_id' field.
      * @return This builder.
      */
    public my.mudah.beam.test.avro.action_states_pkey.Builder clearStateId() {
      state_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public action_states_pkey build() {
      try {
        action_states_pkey record = new action_states_pkey();
        record.ad_id = fieldSetFlags()[0] ? this.ad_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.action_id = fieldSetFlags()[1] ? this.action_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.state_id = fieldSetFlags()[2] ? this.state_id : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
